#!/bin/bash

# Check if a command line argument was provided
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 [wormhole|grayskull]"
    exit 1
fi

# Set the TT_DEVICE variable to the first command line argument
TT_DEVICE=$1

# Start benchmarking
echo "Running TT-Model Benchmarking on $TT_DEVICE"

# BERT - Text Classification - SST-2
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m bert -c large --task text_classification -mb 64 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m bert -c large --task text_classification -mb 64 --loop_count 128 -df Bfp8_b -mf LoFi -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# ResNet - Image Classification - ImageNet
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m resnet -c resnet50 --task image_classification -mb 256 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m resnet -c resnet50 --task image_classification -mb 64 --loop_count 128 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# T5 - Text Summarization - CNN Dailymail
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m t5_past_cache_enc_dec -c large --task text_summarization -mb 1 --loop_count 1 -opt 4 --save_output
    python benchmark.py -d tt -m t5 -c large --task text_summarization -mb 1 --loop_count 1 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m t5 -c large --task text_summarization -mb 1 --loop_count 1 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# FLAN-T5 - Text Summarization - CNN Dailymail
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m flant5_past_cache_enc_dec -c large --task text_summarization -mb 1 --loop_count 1 -opt 4 --save_output
    python benchmark.py -d tt -m flant5 -c large --task text_summarization -mb 1 --loop_count 1 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m flant5 -c large --task text_summarization -mb 1 --loop_count 1 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# VoVNet - Image Classification - ImageNet
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m vovnet_v2 -c 39 --task image_classification -mb 128 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m vovnet_v2 -c 39 --task image_classification -mb 64 --loop_count 128 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# MobileNetV1 - Image Classification - ImageNet
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m mobilenetv1 -c 224 --task image_classification -mb 256 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m mobilenetv1 -c 224 --task image_classification -mb 64 -mf HiFi3 --loop_count 128 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# MobileNetV2 - Image Classification - ImageNet
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m mobilenetv2 -c 224 --task image_classification -mb 256 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m mobilenetv2 -c 224 --task image_classification -mb 64 -mf HiFi3 --loop_count 128 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# MobileNetV3 - Image Classification - ImageNet
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m mobilenetv3 -c lg --task image_classification -mb 64 -mf HiFi2 --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m mobilenetv3 -c lg --task image_classification -mb 64 -mf HiFi3 --loop_count 128 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# HRNet - Image Classification - ImageNet
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m hrnet -c v2_w64 --task image_classification -mb 128 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m hrnet -c v2_w64 --task image_classification -mb 64 --loop_count 128 -df Bfp8_b -mf LoFi -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# ViT - Image Classification - ImageNet
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m vit -c base --task image_classification -mb 256 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m vit -c base --task image_classification -mb 64 --loop_count 128 -df Bfp8_b -mf LoFi -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# DeiT - Image Classification - ImageNet
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m deit -c base --task image_classification -mb 256 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m deit -c base --task image_classification -mb 64 --loop_count 128 -df Bfp8_b -mf LoFi -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# YOLOv5 - Object Detecton - COCO
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m yolo_v5 -c s --task object_detection -mb 128 --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m yolo_v5 -c s --task object_detection -mb 64 --loop_count 8 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# OpenPose - Pose Estimation - COCO keypoints
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m open_pose -c 2d --task pose_estimation -mb 128 -df Fp16 --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m open_pose -c 2d --task pose_estimation -mb 64 -df Fp16 --loop_count 128 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# U-Net - Segmentation - Brain LGG Dataset
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m unet -c 256 --task segmentation -mb 64 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m unet -c 256 --task segmentation -mb 64 --loop_count 128 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# Inception-v4 - Image Classification - ImageNet
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m inception_v4 -c 224 --task image_classification -mb 128 -df Bfp8_b -mf LoFi --loop_count 128 -opt 4 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    python benchmark.py -d tt -m inception_v4 -c 224 --task image_classification -mb 64 --loop_count 128 -opt 4 --save_output
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# Whisper - ASR - LibriSpeech
python benchmark.py -d tt -m whisper_enc_dec -c small --task asr -mb 1 --loop_count 1 -opt 4 --save_output

# Falcon - Text Generation - HellaSwag
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m falcon -c 7b-instruct --task hellaswag -df Fp16_b -mb 32 --loop_count 1 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    echo "Model not supported on: $TT_DEVICE"
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi

# Stable Diffusion - Image Generation
if [ "$TT_DEVICE" = "wormhole" ]; then
    python benchmark.py -d tt -m stable_diffusion -c v1-4 --task image_generation -df Fp16_b -mb 1 --loop_count 1 --save_output
elif [ "$TT_DEVICE" = "grayskull" ]; then
    echo "Model not supported on: $TT_DEVICE"
else
    echo "Invalid TT_DEVICE: $TT_DEVICE"
    exit 1
fi
